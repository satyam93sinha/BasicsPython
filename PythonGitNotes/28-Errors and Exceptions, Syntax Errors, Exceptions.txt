Refer 1-Errors and Exceptions, Syntax Errors, Exceptions.py

ERRORS AND EXCEPTIONS
There are(at least) two distinguishable  kinds of errors:
	1. Syntax errors
	2. Exceptions

SYNTAX ERRORS:
Also known as Parsing Errors.
>>> while True print('Hello world')
 File "<stdin>", line 1
 while True print('Hello world') 
		^ 
SyntaxError: invalid syntax 
The parser repeats the offending line and displays a little 'arrow' pointing at the earliest point in the line where the error was detected. The error is caused by(or at least detected at) the token preceding the arrow(^).
Here, in the above example error is detected at print(), since a colon(':') is missing before it. The error line also suggests the file name and line number for us to look in case the input came from a script.
NOTE- In Python 3.7 Interpreter we get the error as highlighting the print().
>>> while True print('hey')
SyntaxError: invalid syntax

EXCEPTIONS:
Sometimes we notice errors even if the statement or expression are syntactically correct but at the time of execution. Thus, errors detected at the time of execution are called as EXCEPTIONS and are sometimes conditionally fatal(dangerous).
for example:
>>> 18 * (4/0)
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    18 * (4/0)
ZeroDivisionError: division by zero
>>> '34'+53
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    '34'+53
TypeError: can only concatenate str (not "int") to str
NameError isn't unknown to us anymore.
The line TypeError: can only concatenate str (not "int") to str is the error message which indicates what exactly happened. The first part of this error message contains Exception type as TypeError, ZeroDivisionError which are strings, name of the built-in exceptions that occurred.
The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-deﬁned exceptions (although it is a useful convention) because user-defined exception can be anything and no one knows if the Exception type string can be different from the built-in one/actually, defined one. Standard exception names are built-in identiﬁers (not reserved keywords). 
The preceding part of the error message shows the context where the exception happened, in the form of a stack traceback. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input. Now, we know what is 'Traceback' written for in errors we get in Python.
bltin-exceptions lists the built-in exceptions and their meanings.
