Refer 1-Fancier Output Formatting.py, 2-Fancier Output Formatting

FANCIER OUTPUT FORMATTING:

Three ways of writing values:
	1. Expression Statements - writing statements directly to the interpreter
	2. print() function.
	3. use write() method of file objects: standard output file can be referenced as sys.stdout. See Library Reference for more info on this.

Two ways to control format the output:

	1. You can do all the string handling yourself by using string slicing and concatenation operations to create any layout you can imagine. The string type has some methods that perform useful operations for padding strings to a given column width.
	2. use formatted string literals mentioning f or F in the beginning of string providing variables or literals within the curly braces {}, or the str.format() method. There are more methods of formatting a string as using the % operator instead of format() method/attribute of string.
	3. string Module contains a Template class which offers another way to substitute values into strings, using placeholders like $x and replacing them with values from a dictionary, but offers much less control of the formatting.

Two ways to convert values to strings:
	1. str() - meant to return representations of values which are fairly human-readable. The objects which don't have any specific representation for human consumption, str() will return same value/representation as repr().
	2. repr() - meant to generate representations of values which can be read by the interpreter.
        SyntaxError: if there is no equivalent syntax.
NOTE- Many values, such as numbers or structures like lists and dictionaries, have the same representation using either function. Strings, in particular, have two distinct representations. 
Some Examples:
Refer Examples 1-Fancier Output Formatting.py

>>> s = 'Hello, world.' 
>>> str(s) 
'Hello, world.' 
>>> repr(s) 
"'Hello, world.'" 
>>> str(1/7) '0.14285714285714285' 
>>> x = 10 * 3.25 
>>> y = 200 * 200 
>>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...' 
>>> print(s) The value of x is 32.5, and y is 40000... 
>>> # The repr() of a string adds string quotes and backslashes: ... hello = 'hello, world\n'
>>> hellos = repr(hello) 
>>> print(hellos) 'hello, world\n'
>>> # The argument to repr() may be any Python object: 
... repr((x, y, ('spam', 'eggs'))) "(32.5, 40000, ('spam', 'eggs'))" 

>>> type(string)
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    type(string)
NameError: name 'string' is not defined
>>> type(str)
<class 'type'>
>>> s = 'Hello, world'
>>> type(s)
<class 'str'>
>>> str(s)
'Hello, world'
>>> s
'Hello, world'
>>> s_2 = "Hey, what's the difference"
>>> s_2
"Hey, what's the difference"
>>> repr(s)
"'Hello, world'"
>>> type(s)
<class 'str'>
>>> type(repr(s))
<class 'str'>
>>> type(str(s))
<class 'str'>
>>> str(s)
'Hello, world'
>>> str(s_2)
"Hey, what's the difference"
>>> repr(s_2)
'"Hey, what\'s the difference"'
>>> # str() returns representation for fairly human-readable
>>> # repr() generate representations which can be read by interpreter
>>> str(1/7)
'0.14285714285714285'
>>> repr(1/7)
'0.14285714285714285'
>>> # No specific representation for human-consumption so str() and repr() give
>>> # same output for str(1/7) and repr(1/7)
>>> x = 3.25
>>> x = 2.32*10
>>> y = 40**2
>>> result = 'The result of x:' + repr(x) + 'and y:' + str(y)
>>> result
'The result of x:23.2and y:1600'
>>> result = 'The result of x:' + repr(x) + 'and y:' + str(y) + '\n line change
SyntaxError: EOL while scanning string literal
>>> result = 'The result of x:' + repr(x) + 'and y:' + str(y) + '\n line change'
>>> result
'The result of x:23.2and y:1600\n line change'
>>> result = 'The result of x:' + repr(x) + 'and y:' + repr(y) + '\n line change'
>>> result
'The result of x:23.2and y:1600\n line change'
>>> str(result)
'The result of x:23.2and y:1600\n line change'
>>> print(result)
The result of x:23.2and y:1600
 line change
>>> # the repr() and str() adds string quotes and backslashes, no line change is seen in the above context, but when print() is used, the output depicts change

Two  ways to write table of squares and cubes:
>>> for x in range(1, 11): 
... print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ') 
... # Note use of 'end' on previous line 
... print(repr(x*x*x).rjust(4)) 
... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000
>>> for x in range(1, 11): 
... print('{0:2d} {1:3d}   {2:4d}'.format(x, x*x, x*x*x)) 
... 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 
I can say that rjust(2) is equivalent to {0:2d}, similarly rjust(3) and rjust(4) to {1:3d} and {2:4d}. Here, we have mentioned 0, 1 and 2 to reference the index of format() function. 2d, 3d and 4d are to mark the number of spaces to format the string.

NOTE- one space between each column gets added by the way print() works: by default it adds spaces between its arguments.

Four ways to actually justify a string, add padding;

	1. str.rjust(length, fillchar) - method of string objects, which right-justiﬁes a string in a ﬁeld of a given width by padding it with spaces(by default) on the left. 
	length: length of the modified string. If length is less than or equal to the length of the original string then original string is returned.
	fillchar: (optional) characters which needs to be padded. If it’s not provided, space is taken as a default argument.
	2. str.ljust(length, fillchar) - left justifies a string, works similar to str.rjust().
	3. str.center(length, fillchar) - center justifies a string, works similar to str.rjust().
	4. str.zfill() - which pads a numeric string on the left with zeros. It understands plus and minus signs.
NOTE- fillchar takes exactly one argument, a unicode, not an integer.

These methods do not write anything, they just return a new string. If the input string is too long, they don’t truncate it, but return it unchanged; this will mess up your column lay-out but that’s usually better than the alternative, which would be lying about a value. (If you really want truncation you can always add a slice operation, as in x.ljust(n)[:n].) 

>>> print('We are the {} who say "{}!"'.format('knights', 'Ni')) 
We are the knights who say "Ni!" 
{} with or without characters are called as format fields, replaced with the objects passed into str.format() method.
Ex-
>>> s = 'hello'
>>> s_2 = 'world'
>>> print('{0}, {1}'.format(s, s_2))
hello, world
>>> print('{}, {}'.format(s, s_2))
hello, world

If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument. 
>>> print('{word1}, {word2}'.format(word1=s, word2=s_2))
hello, world
Positional and keyword arguments can be arbitrarily combined: 
>>> print('{1}, {word2}'.format(1=s, word2=s_2))
SyntaxError: keyword can't be an expression
>>> print('{1}, {word2}'.format(s, word2=s_2))
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    print('{1}, {word2}'.format(s, word2=s_2))
IndexError: tuple index out of range
>>> print('{0}, {word2}'.format(s, word2=s_2))
hello, world
>>> # .format(*args) and as we already know (*args) takes tuple as input, thus when we put {1} the index of tuple is taken as 1 which is out of range bcoz the keyword argument already is defined with its value, so correct would be to refer to the tuple according to its index.
'!a' (apply ascii()), '!s' (apply str()) and '!r' (apply repr()) can be used to convert the value before it is formatted: 
>>> print('{!s}, {!r}'.format(s, s_2))
hello, 'world'
>>> print('{!a}, {!r}'.format(s, s_2))
'hello', 'world'
>>> # !a, !s, !r to convert values to ascii, str() and repr() strings before they are formatted.

An optional ':' and format speciﬁer can follow the ﬁeld name. This allows greater control over how the value is formatted. The following example rounds Pi to three places after the decimal. 
>>> import math
>>> print('{0:.3f}'.format(math.pi))
3.142
>>> math.pi
3.141592653589793
>>> # the actual value of math.pi is shown above which gets formatted to 3 decimal places through .format() and optional use of ":" with format specifier.
>>> print('{0:5f}'.format(1234567890))
1234567890.000000
>>> print('{0:5}'.format(1234567890))
1234567890
>>> print('{0:5}'.format(123))
  123
>>> # Passing an integer after the ':' will cause that ﬁeld to be a minimum number of characters wide. Useful for making tables pretty.
>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678} 
>>> for name, phone in table.items(): 
... print('{0:10} ==> {1:10d}'.format(name, phone)) 
... Jack ==> 4098 
Dcab ==> 7678 
Sjoerd ==> 4127
>>> for name, phone in table.items():
	print('{0}, {1}'.format(name,phone))

	
Jack, 1234
Shaun, 3232
Evelyn, 39884

If you have a really long format string that you don’t want to split up, it would be nice if you could reference the variables to be formatted by name instead of by position. This can be done by simply passing the dict and using square brackets '[]' to access the keys 
>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} 
>>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; ' 
... 'Dcab: {0[Dcab]:d}'.format(table)) 
Jack: 4098; Sjoerd: 4127; Dcab: 8637678 
This could also be done by passing the table as keyword arguments with the ‘**’ notation. 
>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678} 
>>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table)) 
Jack: 4098; Sjoerd: 4127; Dcab: 8637678 

OLD STRING FORMATTING:
The % operator can also be used for string formatting. It interprets the left argument(Here, %5.3f) much like a sprintf() - style format string to be applied to the right argument(here, % math.pi), and returns the string resulting from this formatting operation. 
For example: 
>>> import math 
>>> print('The value of PI is approximately %5.3f.' % math.pi) 
The value of PI is approximately 3.142. 
More information can be found in the old-string-formatting section.
