Refer 1-Methods of File Objects.py, 2-Methods of File Objects.py

METHODS OF FILE OBJECTS:
To read a ﬁle’s contents, call f.read(size), which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode). Size is an optional numeric argument. When size is omitted or negative, the entire contents of the ﬁle will be read and returned; it’s your problem if the ﬁle is twice as large as your machine’s memory. Otherwise, at most size bytes are read and returned. If the end of ﬁle is reached, f.read() will return an empty string (''). 
f.readline() reads a single line from the ﬁle; a newline character (\n) is left at the end of the string, and is only omitted on the last line of the ﬁle if the ﬁle doesn’t end in a newline. This makes the return value unambiguous; if f.readline() returns an empty string, the end of the ﬁle is reached, while a blank line is represented by '\n', a string containing only a single newline. 
For reading lines from a ﬁle, you can loop over the ﬁle object. This is memory efficient, fast, and leads to simple code.
>>> with open('file1.txt', 'r') as f:
	for line in f:
		print(line)		
traditional Chinese encoding
new line inserted
new line inserted
Lines have been changed to check the output in python interpreter using read mode.
If you want to read all the lines of a ﬁle in a list you can also use list(f) or f.readlines(). f.write(string) writes the contents of string to the ﬁle, returning the number of characters written. Other types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary mode) – before writing them: 
>>> with open('file1.txt', 'a') as f:
	val=('appending', 'tuple')
	f.write(val)	
Traceback (most recent call last):
  File "<pyshell#36>", line 3, in <module>
    f.write(val)
TypeError: write() argument must be str, not tuple
>>> with open('file1.txt', 'a') as f:
	val=('appending', 'tuple')
	f.write(str(val))	
22
>>> with open('file1.txt', 'r') as f:
	f.read()	
"traditional chinese encoding\nnew line inserted\nnew line inserted\nLines have been changed to check the output in python interpreter using read mode.('appending', 'tuple')"
f.tell() returns an integer giving the ﬁle object’s current position in the ﬁle represented as number of bytes from the beginning of the ﬁle when in binary mode and an opaque number when in text mode. 
To change the ﬁle object’s position, use f.seek(offset, from_what). The position is computed from adding offset to a reference point; the reference point is selected by the from_what argument. A from_what value of 0 measures from beginning of the ﬁle, 1 uses the current ﬁle position, and 2 uses the end of the ﬁle as the reference point. from_what can be omitted and defaults to 0, setting beginning of the ﬁle as reference point. 

Refer 1-Methods of File Objects.py and 2-Methods of File Objects.py for examples.

In text ﬁles (those opened without a b in the mode string), seeks relative to beginning of a ﬁle are allowed (the exception being seeking to the same ﬁle's end with seek(0, 2)) and the only valid offset values are those returned from the f.tell() or zero. Any other offset value produces undeﬁned behavior. 
File objects have some additional methods, such as isatty() and truncate() which are less frequently used; consult the Library Reference for a complete guide to ﬁle objects.
