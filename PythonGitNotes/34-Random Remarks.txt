Refer to 1-Random Remarks.py, 2-Random Remarks.py, 3-Random Remarks.py

RANDOM REMARKS:

Data attributes override method attributes with the same name; to avoid accidental name conﬂicts, which may cause hard-to-ﬁnd bugs in large programs, it is wise to use some kind of convention that minimizes the chance of conﬂicts. Possible conventions include capitalizing method names, preﬁxing data attribute names with a small unique string (perhaps just an underscore), or using verbs for methods and nouns for data attributes. In other words, when we access any of the data attribute and method attribute through "instance object"(generally we access with instance object), data attribute will forever be overriding method object unless the former is deleted. In order to avoid it we need to access functions as function objects or adopt name convention. 
Refer to 2-Random Remarks.py 
There's no shorthand for referencing data attributes or other methods from within methods, it has to be referenced through instance objects, may be followed by dot and the method object or other objects within it. Going with this will improve readability of code and provide easy differentiation of local variables from instance variables.
Often, the ﬁrst argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program (a program to check if classes are properly defined as per convention) might be written that relies upon such a convention.
# Function defined outside the class 
def f1(self, x, y):
   return min(x, x+y)
class C:
    f = f1
    def g(self):
        return 'hello world'
    h = g
Now f, g and h are all attributes of class C that refer to function objects, and consequently they are all methods of instances of C — h being exactly equivalent to g. Note that this practice usually only serves to confuse the reader of a program. 
Global names can be referenced by methods as they are done by functions. This is actually the module containing its (global name's) definition. A class is never used as a global scope, it has its own local scope similar to functions and class itself is defined within a global scope.
Each value is an object, and therefore has a class (also called its type). It is stored as object.__class__.
