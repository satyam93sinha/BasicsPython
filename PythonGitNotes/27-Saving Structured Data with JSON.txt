Refer Saving structured data with json.py

SAVING STRUCTURED DATA WITH JSON:
	1. Strings can easily be written to and read from a file
	2. other data types may take a bit of effort because read() method only returns a string and write() method only writes a string to a file
	3. thus, to minimize extra effort of changing, converting objects from and to strings we either would pass them to respective functions to change their data types or use JSON(JavaScript Object Notation)
Strings can easily be written to and read from a ﬁle. Numbers take a bit more effort, since the read() method returns string, which will have to be passed to a function like int(), which takes a string like '123' and returns its numeric value 123. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.
Rather than having users constantly writing and debugging code to save complicated data types to ﬁles, Python allows you to use the popular data interchange format called JSON (JavaScript Object Notation). The standard module called json can take Python data hierarchies, and convert them to string representations; this process is called serializing. Reconstructing the data from the string representation is called deserializing.
Serializing example:
>>> f = open('file4.txt', 'w') 
>>> x = {1:1, 2:4} 
>>> import json 
>>> json.dump(x, f)	 
>>> f.close()
>>> f = open('file4.txt')	 
>>> f.read() 
'{"1": 1, "2": 4}'
>>> f.close()
Deserializing example:
>>> f.close()
>>> f = open('file4.txt')
>>> json.load(f)
{'1': 1, '2': 4}
NOTE: The JSON format is commonly used by modern applications to allow data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability.
If you have an object x, you can view its JSON string representation with a simple line of code: 
>>> import json 
>>> json.dumps([1, 'simple', 'list']) 
'[1, "simple", "list"]' 

Another variant of the dumps() function, called dump(), simply serializes the object to a text ﬁle. So if f is a text ﬁle object opened for writing, we can do this: 
json.dump(x, f) 

To decode the object again, if f is a text ﬁle object which has been opened for reading: 
x = json.load(f) 

This simple serialization technique can handle lists and dictionaries, but serializing arbitrary class instances in JSON requires a bit of extra effort. The reference for the json module contains an explanation of this. 

Will see later-
pickle - the pickle module Contrary to JSON, pickle is a protocol which allows the serialization of arbitrarily complex Python objects. As such, it is speciﬁc to Python and cannot be used to communicate with applications written in other languages. It is also insecure by default: deserializing pickle data coming from an untrusted source can execute arbitrary code, if the data was crafted by a skilled attacker.
