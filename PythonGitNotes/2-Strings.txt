STRINGS-

Python can manipulate Strings which are enclosed in single quotes or double quotes. Also, \ is used to escape the single quotes, or double quotes.

Example-
>>> 'spam eggs'  # single quotes
'spam eggs'
>>> 'doesn\'t'  # use \' to escape the single quote. The result appears in double quotes if any escape sequence is introduced.
"doesn't"
>>> "doesn't"  # ...or use double quotes instead
"doesn't"
>>> '"Yes," he said.'
'"Yes," he said.'
>>> "\"Yes,\" he said."
'"Yes," he said.'
>>> '"Isn\'t," she said.'
'"Isn\'t," she said.'
# Single quotes within single quotes used with escape sequence provides output as single quotes nested within double quotes and vice-versa.

Example 2-
>>> 'she said'
'she said'
>>> "quotes too come in output when we enter String directly in Python"
'quotes too come in output when we enter String directly in Python'
>>> python # python compiler treats it as variable which hasn't yet been defined.
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    python
NameError: name 'python' is not defined
>>> 'if we don\'t include quotes and print command, String is treated as variable'
"if we don't include quotes and print command, String is treated as variable"

In the Interactive Interpreter, the output string is enclosed in quotes and special characters are escaped with backslashes. While this might sometimes look different from the input (the enclosing quotes could change), the two strings are equivalent. The string is enclosed in double quotes if the string contains a single quote and no double quotes, otherwise it is enclosed in single quotes. The print() function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters:

What happens is: if there is an escape sequence or backslash to show '' in output, the output comes in double quotes as can be seen in below example=

>>> 'if we don\'t include quotes and print command, String is treated as variable'
"if we don't include quotes and print command, String is treated as variable"

>>> '"Isn\'t," she said.'
'"Isn\'t," she said.'
>>> print('"Isn\'t," she said.')
"Isn't," she said.
>>> s = 'First line.\nSecond line.'  # \n is NewLine Character
>>> s  # without print(), \n is included in the output
'First line.\nSecond line.'
>>> print(s)  # with print(), \n produces a new line
First line.
Second line.

\n is included in the output, means it is shown in output whereas
When we write print() function, \n produces a new line.

>>> s='first line. \n second line.'
>>> s
'first line. \n second line.'
>>> print(s)
first line. 
 second line.
>>> s='first line. second line'
>>> print(s)
first line. second line

Check the above example to see
how indentation works.

>>> print(r'first line.\n this is treated as special character without raw string')
first line.\n this is treated as special character without raw string
>>> print(r'first line.\n this is not treated as special character if raw string denoted by r is included before quotes')
first line.\n this is not treated as special character if raw string denoted by r is included before quotes

String literals can span multiple lines. One way is using triple-quotes: """...""" or '''...'''. End of lines are automatically included in the string, but it’s possible to prevent this by adding a \ at the end of the line. The following example: 
>>> print("""\
Let's see if it works:
Multiple Line String-   No of Lines is  = 2""")
Let's see if it works:
Multiple Line String-   No of Lines is  = 2
>>> print("""
Let's see if it works:
Multiple Line String-   No of Lines is  = 2""")

Let's see if it works:
Multiple Line String-   No of Lines is  = 2

Strings can be concatenated (glued together) with the + operator, and repeated with *: 
>>> # 3 times 'un' followed by 'ium'
>>> 3*'un'+'ium'
'unununium'
>>> 3*"un"+'ium'
'unununium'
Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated. 
>>> 'Py' "thon" "is being studied" '. Space is added here but not in the previous case'
'Pythonis being studied. Space is added here but not in the previous case'
This only works with two literals though, not with variables or expressions: 
>>> prefix = 'Py' 
>>> prefix 'thon' # can't concatenate a variable and a string literal 
... 
SyntaxError: invalid syntax 
>>> ('un' * 3) 'ium' 
... 
SyntaxError: invalid syntax 

If you want to concatenate variables or a variable and a literal, use +:
>>> prefix + 'thon'
'Python'

String can be indexed(subscripted):
>>> word = 'Python'
>>> word[0]  # character in position 0
'P'
>>> word[5]  # character in position 5
'n'
>>> word[-1]  # last character
'n'
>>> word[-2]  # second-last character
'o'
>>> word[-6]
'P'

Slicing is supported:
In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing allows you to obtain substring:

>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'
>>> word[:2]   # characters from position 0 (included) to 2(excluded)
'Py'
>>> word[3:]   # characters from position 3 (included) to end of word(if number/length not mentioned)
'hon'
Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced.
>>> word[:2]   # character from the beginning to position 2 (excluded)
'Py'
>>> word[4:]   # characters from position 4 (included) to the end
'on'
>>> word[-2:]  # characters from the second-last (included) to the end
'on'
+---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For example, the length of word[1:3] is 2.
Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the string results in an error:
>>> word[0] = 'J'
  ...
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
  ...
TypeError: 'str' object does not support item assignment

One can create different String if needed:
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'

len(word) function is a built in function
returning length of the provided String.
