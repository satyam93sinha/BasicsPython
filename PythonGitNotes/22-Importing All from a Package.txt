Refer Fibonacci_Package.py

IMPORTING * FROM A PACKAGE:

Now what happens when the user writes from sound.effects import *? Ideally, one would hope that this somehow goes out to the ﬁlesystem, ﬁnds which submodules are present in the package, and imports them all. This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported(imported in __init__.py file of package). The only solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a package’s __init__.py code deﬁnes a list named __all__, it is taken to be the list of module names that should be imported when from package import * is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing * from their package. For example, the ﬁle sound/effects/__init__.py could contain the following code: 
__all__ = ["Fibonacci", "FibonacciReturn"]
This would mean that from Fibonacci_Package import * would import the two named submodules of the Fibonacci_Package package.
If __all__ is not deﬁned, the statement from sound.effects import * does not import all submodules from the package sound.effects into the current namespace; it only ensures that the package sound.effects has been imported (possibly running any initialization code in __init__.py) and then imports whatever names are deﬁned in the package. This includes any names deﬁned (and submodules explicitly loaded) by __init__.py. It also includes any submodules of the package that were  explicitly loaded by previous import statements. Consider this code: 

Refer Packages Import All 1.py

import sound.effects.echo 
import sound.effects.surround 
from sound.effects import * 

The echo and surround modules are imported as we see them being imported as sound.effects.echo and sound.effects.surround.
from sound.effects import * can import the modules that are defined as a list to variable __all__ in __init__.py file.
Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practice in production code. 
Recommended notation "from Package import specific_submodule!" is right to use until the importing module needs to use submodules with the same name from different packages, i.e., submodules have same names from different packages which may confuse the interpreter as to which module to go with
