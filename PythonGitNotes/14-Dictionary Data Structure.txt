Refer to Dictionary 1.py  and Dictionary 2.py

DICTIONARY -
Useful data type built into Python. Found in other languages as "associative memories" or "associative arrays". Sequences are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples too can be taken as keys if they contain only strings, numbers or tuples; Any tuple containing mutable objects can't be used as keys, similarly no list can be keys because keys are immutable type and can never be mutable.
Dictionaries can be thought as an unordered set of key: value pairs, provided the keys are unique (can't be same in dictionary). { } creates an empty dictionary. 
>>> a = {}
>>> type(a)
<class 'dict'>
>>> a
{}
>>> a = {key = value,}
SyntaxError: invalid syntax
>>> a = {'key' = 'value',}
SyntaxError: invalid syntax
>>> a = {'key':'value',}
>>> a
{'key': 'value'}
>>> a = {"":"",}
>>> a
{' ': ' '}
>>> a = {:,}
SyntaxError: invalid syntax
>>> a
{' ': ' '} 
# space between single inverted comma is given to simply clear there's single inverted comma(with nothing). In python interpreter it is displayed as {'':''}
>>> a = {key = value,}
SyntaxError: invalid syntax
>>> a = {'key' = 'value',}
SyntaxError: invalid syntax
>>> a = {'key':'value',}
>>> a
{'key': 'value'}
>>> a = {"":"",}
>>> a
{'': ''}
>>> # Placing a comma separated list of key: value pairs within the braces adds initial key: value pairs to the dictionary; this is also the way dictionaries are written at output.
>>> a = {:,}
SyntaxError: invalid syntax
>>> a
{'': ''}
The main operations on a dictionary are storing a value with some key and extracting the value providing specific key. It is also possible to delete a key : value pair with del. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key. 
>>> dictionary = {}
>>> list(dictionary.keys())
[]
>>> dictionary = {'name':"Satyam", 'age':"25", 'Qualification':"Software Engineer"}
>>> list(dictionary.keys())
['name', 'age', 'Qualification']
>>> """List of Keys
		Keys present in dictionary are returned in a list through list(dictionary.keys()) statement. The output is simply a shallow copy and hasn't been stored at any memory location, thus can't be referenced again. We'll have to execute the same statement to get the list of all the keys of a dictionary. Returns this list of keys in arbitrary order, the order it was defined in dictionary."""
>>> list(dictionary.value())
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    list(dictionary.value())
AttributeError: 'dict' object has no attribute 'value'
>>> """ Value isn't returned"""
>>> sorted(dictionary.keys())
['Qualification', 'age', 'name']
>>> # returns a new list, shallow copy until stored to another list object, contains all items from the iterable in ascending order when reverse is set to False by default. In this case, sorted(iterable, /, *, key=None, reverse = False) sort the keys according to their ASCII values in ascending order and then returns a new list.
>>> sorted(dictionary.keys(), reverse = True)
['name', 'age', 'Qualification']
#  reverse = True, sorts in descending order.
>>> 'name' in dictionary.keys()
True
>>> # returns Boolean checking if the specific key provided is present as a key of that particular dict.
>>> dict((studio, marvel), (best movie, Avengers Infinity War))
SyntaxError: invalid syntax
>>> dict((studio, marvel), (bestmovie, Avengers Infinity War))
SyntaxError: invalid syntax
# due to presence of spaces without providing quotations
>>> dict((studio, marvel), (bestmovie, Avengers_Infinity_War))
Traceback (most recent call last):
  File "<pyshell#19>", line 1, in <module>
    dict((studio, marvel), (bestmovie, Avengers_Infinity_War))
NameError: name 'studio' is not defined
>>> dict([(studio, marvel), (bestmovie, Avengers_Infinity_War)])
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    dict([(studio, marvel), (bestmovie, Avengers_Infinity_War)])
NameError: name 'studio' is not defined
>>> dict([('studio', 'marvel'), ('best movie', 'Avengers:Infinity War')])
{'studio': 'marvel', 'best movie': 'Avengers:Infinity War'}

>>> dict((('studio', 'Marvel'), ("first_female_standalone_movie", 'Captain Marvel')))
{'studio': 'Marvel', 'first_female_standalone_movie': 'Captain Marvel'}

# The dict() constructor builds dictionaries directly from sequences of key-value pairs.
>>> squares
{2: 4, 4: 16, 5: 25, 6: 36}
>>> squares.get(4)
16
>>> # We use get(self, key, default=None, /) to get the value for specific key present in dictionary, if absent default value is returned.
>>> squares.get(0)
# returns nothing
In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: 
>>> {x: x**2 for x in (2, 4, 6)} 
{2: 4, 4: 16, 6: 36} 
When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments: 
>>> dict(sape=4139, guido=4127, jack=4098) 
{'sape': 4139, 'guido': 4127, 'jack': 4098}
